-------------------------
4 Days - DevSecOps
-------------------------
Agenda
-----------------------
Docker		HALF
SonarQube	HALF

Jenkins		ONE

Selenium	HALF
Jmeter		HALF

Jacoco		HALF
DevSecOps 	- THEoRY	HALF
===============================
9:30 AM  - 6:00 PM
===============================
Lunch - 1:00 - 2:00 
BREAK - 
	15mins
	11.30
	4.00
===================================
===================================
What is Docker?
-----------------------------------
	Container mgmt tool/platform
	Release
		Community
		Enterprise
		https://www.devopsschool.com/blog/
	Version
		20.X
	Written in Golang
	By SOloman hykes
	

mgmt ---? 
tool
	Save time
	Save Cost
	Improve Quality
	-------------------------------
		to RUN app(s) in DATACENTER

What is Container?
-------------------------------------
a lightweight APP runtime independent env

is a ONE USER NS 
		attached to 
				ONE NET NS
				ONE PID NS 
				ONE MNT NS

MNT
-------------------
FILESYSTEM
	a collections of file/dir with one objective

TYPES
	BOOT FILESYSTEM	 - KERNAL
	ROOT 	= CONTAINER 	=== UBUNTU = REDHAT = FEDORA
	USER	= CONTAINER
	APP	= CONTAINER


What r the Resources we NEED to run APP?
----------------------------------------
HARDWARE
	OS
	  Kernel
		Namespace
				ALLOWED		CAN		NEED
			MOUNT	1		MULTIPLE	ONE
			PID MAP	1		MULTIPLE	ONE	
			USER	MULTIPLE	MULTIPLE	ONE
			NETWORK	1		MULTIPLE	ONE
			
		Cgroups		- Assign CPU and RAM to PID
		Capbilities	- Decide you are ROOT or Not root.



			ONE APP
			- Filesystem
		  	- ONE PID for Allocating a CPU and RAM
			- ONE USER
	   		- Network
Kernel		
The kernel is a computer program at the core of a computer's operating system that has complete control over everything in the system.

=========================================================================
Evolution of Computing?
-------------------------------------------------------------------------
PHYSICAL SERVER		Virtual Server		Container
---------------------------------------------------------------------
		Internet
HARDWARE

=================================================================
PC = PERSONAL COMPUTING
Why We need it?

How docker works? Docker Architecture!!
========================================================
Human -> Docker Client -----REST----> Docker Server -> ContainerD -> Kernal
        ==========================================
			Docker Engine

Other tools
https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/

Components of Docker
- Docker Engine			DONE
- Docker Image
	VM Image
	-------------------
	BOOT FS
	ROOT FS
	USER FS
	AP FS

	DOCKER Image
	-------------------
	ROOT FS
	USER FS
	APP FS

	ONE COPY OF IMAGE - GET MOUNTED IN EACH CONTAINER
	ONE IMAGE - yOu can create as many container.

Docker Registry
	Repository
		VERSION OF FILESYSTEM
			ROOT FS
			USER FS
			APP FS

	Public
		docker hub
		google registry
		Azure Registry
	Pvt
		Artifactory
		nexus

Docker Container
	When we RUN Docker Image using Docker Client.
	        ---

		Create ONE USER
		Create ONE NET
		CREATE ONE PID 
		CEATE ONE MOUNT FROM DOCKER IAMGE

		ATTACH NET + PID + MOUNT TO USER
		================================
			Container


How to work with Docker? Docker Work flow
===============================================
Human -> Docker Client -----REST----> Docker Server 

				CHECK IF IMAGE EXIST in SAME MACHINE
				YES  -- -> ContainerD -> Kernal

				NO - Download from HUB + -> ContainerD -> Kernal

VMS LifeCYCLE
-----------------------------------------------------
create -> Start -> STOP -> START -> RESTART -> PAUSE -> Unpause -> KILL -> Remove


Container LifeCYCLE
-----------------------------------------------------
create -> Start -> STOP -> START -> RESTART -> PAUSE -> Unpause -> KILL -> Remove

13.127.224.4
UserName - centos
Password - centos123

$ sudo -s

    9  docker version
   10  clear
   11  docker info
   12  docker v
   13  docker -v
   14  docker help
   15  clear
   16  history

 15  clear
   16  history
   17  clear
   18  docker images
   19  docker ps
   20  docker ps -a
   21  docker pull jenkins/jenkins
   22  clear
   23  docker images
   24  clear
   25  dokcer images
   26  docker images
   27  docker create jenkins/jenkins
   28  docker ps
   29  docker ps -a
   30  docker ps -a
   31  docker create jenkins/jenkins
   32  clear
   33  docker ps -a
   34  docker start 2bc3f0fad4a5
   35  docker ps -a
   36  docker stop 2bc3f0fad4a5
   37  docker ps -a
   38  clear
   39  docker ps -a
   40  docker start 2bc3f0fad4a5
   41  docker ps -a
   42  docker restart 2bc3f0fad4a5
   43  docker ps -a
   44  clear
   45  docker pause 2bc3f0fad4a5
   46  docker ps -a
   47  docker unpause 2bc3f0fad4a5
   48  docker ps -a
   49  clear
   50  docker kill 2bc3f0fad4a5
   51  docker ps -a
   52  docker rm 2bc3f0fad4a5
   53  docker ps -a
   54  docker create jenkins/jenkins
   55  clear
   56  docker ps -a
   57  docker start a03dbea7efbd
   58  docker start a03dbea7efbd 036cf5155415
   59  docker ps -a
   60  docker stop a03dbea7efbd 036cf5155415
   61  clear
   62  docker start a03dbea7efbd 036cf5155415
   63  clear
   64  docker ps -a


How to install it?
https://devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html


Jenkins
	WEB BASED TOOL
	JAVA
		Debian
	8080 port

===========================================
How to connect
	Physical
		SSH
		NETWORK
	Virtual 
		SSH
		NETWORK
	Container
		BECOME
		NETWORK
===============================
pull --> create -> Start --> Become 
------------------------------------
		RUN

===============================
pull --> create -> Start --> DO NOT Become 
------------------------------------
		RUN -d


 387  docker ps -a
  388  clear
  389  docker rm $(docker ps -a -q)
  390  clear
  391  docker ps -a
  392  clear
  393  docker run jenkins/jenkins
  394  clear
  395  id
  396  ps
  397  docker run jenkins/jenkins
  398  clear
  399  clear
  400  docker run -d jenkins/jenkins
  401  docker ps
  402  docker ps -a
  403  clear
  404  ls
  405  ps -eaf | grep containerd
  406  docker run -d jenkins/jenkins
  407  ps -eaf | grep containerd
  408  clear
  409  ls
  410  id
  411  ps
  412  ps -eaf | grep 1885
  413  ps -eaf | grep 1883
  414  ps -eaf | grep 1864
  415  ps -eaf | grep 1883
  416  ps -eaf | grep 1864
  417  ps -eaf | grep 1863
  418  ps -eaf | grep 1413
  419  ps -eaf | grep 1325
  420  ps -eaf
  421  clear
  422  ls
  423  ps -eaf | grep containerd
  424  clear
  425  ps -eaf
  426  clear
  427  docker ps
  428  docker exec d8b2d7a44a96 ps -eaf
  429  ps -eaf
  430  clear
  431  ls
  432  docker ps
  433  df -kh
  434  ls
  435  clear
  436  ls /var/lib/docker/overlay2/c13f6924b264c6f8d4e553c21f476bab02065123163257d92baccf4b95d7ac43/merged
  437  docker ps
  438  docker exec d8b2d7a44a96 ls /
  439  docker exec d8b2d7a44a96 df -kh
  440  clear
  441  ls
  442  docker ps
  443  docker inspect d8b2d7a44a96
  444  ping 172.17.0.3
  445  ping 172.17.0.2
  446  ping 172.17.0.4
  447  history

==========================================================================================
==========================================================================================
Physcial Server 	Virutal Server 			Container is running
is RUNNING 		is RUNNING			is RUNNING
As long as		As long as 			As long as 
PID 1 RUNNING 		PID 1 RUNNING 			PID 1 RUNNING 

PID 1 is SYSTEMD	PID 1 is SYSTEMD		PID 1 is ANYTHING
							Perl
							Pythin
							Java
							/bin/bash
=========================================================================
  449  ps -eaf
  450  clear
  451  docker ps
  452  docker exec d8b2d7a44a96 ps -eaf
  453  docker exec d8b2d7a44a96 kill 1
  454  docker ps
  455  docker ps -a

==================================================
How to access a container
- Go inside a container
	--- EXEC	
			Will Execute an Executables INSIDE A container
			but Human can Interact with container with -it and shell(bash)
	--- Attach
			you can become or attached to a process of PID1

456  history
  457  clear
  458  docker ps
  459  docker exec 7bdf6f971d89 ls
  460  docker exec 7bdf6f971d89 ps
  461  clear
  462  docker exec 7bdf6f971d89 df -kh
  463  docker exec 7bdf6f971d89 dffff
  464  clear]
  465  clesr
  466  clear
  467  docker ps
  468  docker exec -it 7bdf6f971d89 /bin/bash
  469  docker ps
  470  clear
  471  docker ps
  472  docker attach 7bdf6f971d89
  473  docker ps
  474  history


- Access from outside of a container
  482  docker inspect d8b2d7a44a96
  483  clear
  484  ping 172.17.0.2
  485  curl http://172.17.0.2:8080
  486  clear
  487  docker ps
  488  docker run -d -p 8080:8080 jenkins/jenkins
  489  docker ps
=============================================
IP _ 13.235.113.166


=============================================================
=============================================================
What is SonarQube?
-----------------------
	Quality mgmt tool
	Release
	- Community
	- Devloper
	- Enterprise
	- Data Center
	https://www.sonarqube.org/downloads/
	Written in JAVA
	Version 8.X
	From SonarSource
	

What is Quality?
	- Code Quality & Security
		Peer Code Review	- Manual -- Human
		Static Code Review - Automated -- Tool
	- Test Quality

Why Sonarqube?
-----------------
	ALL SCA Tools
	ALL REPORTS
	W - W - W - H -
	Centralized 
	Track a Project Progress
			Quality

Sonarqube Architecture
==============================
Sonarqube Server			DONE
		Rules
		Dashboard
		DB
			ANY RDBMS

Laptop
----------
SourceCode				DONE
Sonarqube Scanner


How to install it?



How to install SonarQube in Linux?
=========================================
Step 1 - Install JAVA
$ sudo yum list installed
$ sudo yum list installed | grep java
$ sudo yum remove <<all java7&8>
$ yum install java-11-openjdk-devel
$ systemctl stop firewalld
$ systemctl disable firewalld

Step 2 - Download and Install and run SonarQube server
$ yum install wget unzip -y
$ su centos1
$ cd
$ wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.4.1.35646.zip
$ unzip sonarqube-8.4.1.35646.zip
$ mv sonarqube-8.4.1.35646 sonarqube-server
$ cd sonarqube-server/bin/linux-x86-64
$ ./sonar.sh start
$ ./sonar.sh status


# https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/
Step 3 - Download and Install Scanner
$ cd 
$ wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216-linux.zip
$ unzip sonar-scanner-cli-4.5.0.2216-linux.zip
$ cd sonar-scanner-cli-4.5.0.2216-linux/bin
# Modify a file sonar-scanner.properties under conf dir
### Copy a FULL PATH OF SCANNER == Make a FULL PATH OF SCANNER
C:\tools\sonarqube\scanner\sonar-scanner-cli-4.5.0.2216-windows\bin\sonar-scanner.bat


Step 4 - Clone git repo
$ cd 
$ git clone https://github.com/devopsschool-demo-labs-projects/java-sonarqube-helloworld-src
$ mv java-sonarqube-helloworld-src src
$ cd src
### Change Projetname - key if you want it in sonar-project.properties

#### RUN a FULL PATH OF SCANNER on the SOURCE CODE where sonar-project.properties


http://13.235.113.166:9000/
admin
admin










How to install it?























